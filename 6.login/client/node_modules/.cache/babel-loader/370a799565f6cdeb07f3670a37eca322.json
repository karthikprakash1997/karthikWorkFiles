{"ast":null,"code":"import _objectSpread from \"/home/aximsoft/Desktop/KarthikPrakashEF/6.login/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/aximsoft/Desktop/KarthikPrakashEF/6.login/client/src/container/signUp/signUp.js\";\nimport React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from '../Auth/Auth.css';\nimport axios from 'axios';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        firstName: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Enter your First Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        lastName: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Enter your Last Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true,\n      status: null,\n      message: null\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = _objectSpread({}, this.state.controls, {\n        [controlName]: _objectSpread({}, this.state.controls[controlName], {\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        })\n      });\n\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      console.log(this.state.controls.firstName.value);\n      axios.post('http://localhost:3003/register', {\n        firstName: this.state.controls.firstName.value,\n        lastName: this.state.controls.lastName.value,\n        email: this.state.controls.email.value,\n        password: this.state.controls.password.value\n      }).then(res => {\n        console.log(res.status);\n\n        if (res.status === 200 && this.state.valid === true) {\n          this.props.history.replace('/');\n          this.setState({\n            status: res.status\n          });\n        } else if (res.status === 200 && this.state.valid === false) {\n          this.setState({\n            message: true\n          });\n          console.log(this.state.message);\n        } else if (res.status !== 200) {\n          this.setState({\n            message: res.status\n          });\n        } else {\n          console.log(res.status);\n          this.setState({\n            status: res.status\n          });\n        }\n      });\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n\n    this.loginHandler = () => {};\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }));\n    let errorMessgae = null;\n\n    if (this.props.error) {\n      errorMessgae = React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, this.props.error.message);\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.Auth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, errorMessgae, React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, form, React.createElement(Button, {\n      btnType: \"Success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"SUBMIT\")), this.state.message);\n  }\n\n}\n\nexport default Auth;","map":{"version":3,"sources":["/home/aximsoft/Desktop/KarthikPrakashEF/6.login/client/src/container/signUp/signUp.js"],"names":["React","Component","Input","Button","classes","axios","Auth","state","controls","firstName","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","lastName","email","isEmail","password","minLength","isSignup","status","message","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","console","log","post","then","res","props","history","replace","switchAuthModeHandler","prevState","loginHandler","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement","errorMessgae","error"],"mappings":"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","sourcesContent":["import  React, {Component} from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from '../Auth/Auth.css';\nimport axios from 'axios'\n\n\nclass Auth extends Component {\n    state = {\n        controls: {\n\n            firstName: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Enter your First Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            lastName: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Enter your Last Name'\n                },\n                value: '',\n                validation: {\n                    required: true,\n    \n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true,\n        status:null,\n        message:null\n    }\n\n    checkValidity ( value, rules ) {\n        let isValid = true;\n        if ( !rules ) {\n            return true;\n        }\n\n        if ( rules.required ) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if ( rules.minLength ) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if ( rules.maxLength ) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if ( rules.isEmail ) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test( value ) && isValid\n        }\n\n        if ( rules.isNumeric ) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test( value ) && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = ( event, controlName ) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity( event.target.value, this.state.controls[controlName].validation ),\n                touched: true\n            }\n        };\n        this.setState( { controls: updatedControls } );\n    }\n\n    submitHandler = ( event ) => {\n        event.preventDefault();\n        console.log(this.state.controls.firstName.value);\n        \n        \n        axios.post('http://localhost:3003/register',{\n\n            firstName: this.state.controls.firstName.value,\n            lastName: this.state.controls.lastName.value,\n            email: this.state.controls.email.value,\n            password: this.state.controls.password.value\n\n        }).then(res=>{console.log(res.status);\n            if(res.status===200 && this.state.valid === true){\n                this.props.history.replace('/');\n                this.setState({status:res.status})\n                \n            }\n            else if(res.status===200 && this.state.valid === false)\n            {\n                this.setState({message:true})\n                console.log(this.state.message);\n                \n            }\n            else if(res.status !==200 ){\n                this.setState({message:res.status})\n\n            }\n\n            \n            else{\n                console.log(res.status);\n                this.setState({status:res.status})\n            }     \n        }\n        );\n\n\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignup: !prevState.isSignup};\n        });\n    }\n\n    loginHandler = ()=>{\n        \n    }\n\n    render () {\n        \n        const formElementsArray = [];\n        for ( let key in this.state.controls ) {\n            formElementsArray.push( {\n                id: key,\n                config: this.state.controls[key]\n            } );\n        }\n\n        let form = formElementsArray.map( formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={( event ) => this.inputChangedHandler( event, formElement.id )} />\n        ) );\n\n        \n\n        let errorMessgae=null;\n        if(this.props.error){\n        errorMessgae=(<p>{this.props.error.message}</p>)\n        }\n         \n        \n        \n        \n\n        return (\n            <div className={classes.Auth}>\n                {errorMessgae}\n                <form onSubmit = {this.submitHandler} >\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                {this.state.message}\n            </div>\n        );\n    }\n}\nexport default  Auth ;"]},"metadata":{},"sourceType":"module"}