{"ast":null,"code":"import _objectSpread from \"/home/aximsoft/Desktop/KarthikPrakashEF/6.login/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/aximsoft/Desktop/KarthikPrakashEF/6.login/client/src/container/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.css';\nimport axios from 'axios';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = _objectSpread({}, this.state.controls, {\n        [controlName]: _objectSpread({}, this.state.controls[controlName], {\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        })\n      });\n\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      axios.post('http://localhost:3003/register', {\n        email: this.state.controls.email.value,\n        password: this.state.controls.password.value\n      }).then(response => {});\n      this.props.history.replace('/dashboard');\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n\n    this.nextPageHandler = () => {\n      this.props.history.replace('/signUp');\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }));\n    let errorMessgae = null;\n\n    if (this.props.error) {\n      errorMessgae = React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, this.props.error.message);\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.Auth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, errorMessgae, React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, form, React.createElement(Button, {\n      btnType: \"Success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"SUBMIT\")), React.createElement(Button, {\n      btnType: \"Success\",\n      clicked: this.nextPageHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"SIGNUP\"));\n  }\n\n}\n\nexport default Auth;","map":{"version":3,"sources":["/home/aximsoft/Desktop/KarthikPrakashEF/6.login/client/src/container/Auth/Auth.js"],"names":["React","Component","Input","Button","classes","axios","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","post","then","response","props","history","replace","switchAuthModeHandler","prevState","nextPageHandler","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement","errorMessgae","error","message"],"mappings":"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","sourcesContent":["import  React, {Component} from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.css';\nimport axios from 'axios'\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true\n    }\n\n    checkValidity ( value, rules ) {\n        let isValid = true;\n        if ( !rules ) {\n            return true;\n        }\n\n        if ( rules.required ) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if ( rules.minLength ) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if ( rules.maxLength ) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if ( rules.isEmail ) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test( value ) && isValid\n        }\n\n        if ( rules.isNumeric ) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test( value ) && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = ( event, controlName ) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity( event.target.value, this.state.controls[controlName].validation ),\n                touched: true\n            }\n        };\n        this.setState( { controls: updatedControls } );\n    }\n\n    submitHandler = ( event ) => {\n        event.preventDefault();\n        axios.post('http://localhost:3003/register',{\n            email:this.state.controls.email.value,\n            password:this.state.controls.password.value\n        })\n        .then(response=> {})\n        this.props.history.replace('/dashboard')\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignup: !prevState.isSignup};\n        });\n\n\n    }\n    nextPageHandler=()=>{\n        this.props.history.replace('/signUp')\n    }\n    render () {\n        \n        const formElementsArray = [];\n        for ( let key in this.state.controls ) {\n            formElementsArray.push( {\n                id: key,\n                config: this.state.controls[key]\n            } );\n        }\n\n        let form = formElementsArray.map( formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={( event ) => this.inputChangedHandler( event, formElement.id )} />\n        ) );\n\n        let errorMessgae=null;\n        if(this.props.error){\n        errorMessgae=(<p>{this.props.error.message}</p>)\n        }\n\n        return (\n            <div className={classes.Auth}>\n                {errorMessgae}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button btnType=\"Success\" clicked = {this.nextPageHandler}>SIGNUP</Button>\n                \n            </div>\n        );\n    }\n}\nexport default  Auth ;"]},"metadata":{},"sourceType":"module"}